// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

import { PackedCounter } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { createTemplate } from "../../libraries/templates/createTemplate.sol";
import { UnitTypes, TerrainTypes, StructureTypes, ItemTypes } from "../common.sol";

import { StructureType, StructureTypeTableId, Untraversable, UntraversableTableId, Capturable, CapturableTableId, Charger, ChargerTableId, ChargeCap, ChargeCapTableId, Combat, CombatTableId, Factory, FactoryTableId, SpawnPoint, SpawnPointTableId, StaminaOnKill, StaminaOnKillTableId } from "../index.sol";

bytes32 constant templateId = "SpawnSettlement";
bytes32 constant SpawnSettlementTemplateId = templateId;
uint256 constant LENGTH = 9;

function SpawnSettlementTemplate() {
  bytes32[] memory tableIds = new bytes32[](LENGTH);
  bytes32[] memory encodedLengthss = new bytes32[](LENGTH);
  bytes[] memory staticDatas = new bytes[](LENGTH);
  bytes[] memory dynamicDatas = new bytes[](LENGTH);

  bytes memory staticData;
  PackedCounter encodedLengths;
  bytes memory dynamicData;

  tableIds[0] = ResourceId.unwrap(StructureTypeTableId);
  tableIds[1] = ResourceId.unwrap(UntraversableTableId);
  tableIds[2] = ResourceId.unwrap(CapturableTableId);
  tableIds[3] = ResourceId.unwrap(ChargerTableId);
  tableIds[4] = ResourceId.unwrap(ChargeCapTableId);
  tableIds[5] = ResourceId.unwrap(CombatTableId);
  tableIds[6] = ResourceId.unwrap(FactoryTableId);
  tableIds[7] = ResourceId.unwrap(SpawnPointTableId);
  tableIds[8] = ResourceId.unwrap(StaminaOnKillTableId);

  (staticData, encodedLengths, dynamicData) = StructureType.encode(StructureTypes(uint8(2)));
  staticDatas[0] = staticData;
  encodedLengthss[0] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[0] = dynamicData;

  (staticData, encodedLengths, dynamicData) = Untraversable.encode(true);
  staticDatas[1] = staticData;
  encodedLengthss[1] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[1] = dynamicData;

  (staticData, encodedLengths, dynamicData) = Capturable.encode(false);
  staticDatas[2] = staticData;
  encodedLengthss[2] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[2] = dynamicData;

  (staticData, encodedLengths, dynamicData) = Charger.encode(200);
  staticDatas[3] = staticData;
  encodedLengthss[3] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[3] = dynamicData;

  (staticData, encodedLengths, dynamicData) = ChargeCap.encode(6400, 0);
  staticDatas[4] = staticData;
  encodedLengthss[4] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[4] = dynamicData;

  (staticData, encodedLengths, dynamicData) = Combat.encode(300000, 300000, 20000, 0, 0, 0);
  staticDatas[5] = staticData;
  encodedLengthss[5] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[5] = dynamicData;
  bytes32[] memory factory_prototypeIds = new bytes32[](5);
  factory_prototypeIds[0] = 0x53776f7264736d616e0000000000000000000000000000000000000000000000;
  factory_prototypeIds[1] = 0x5269646572000000000000000000000000000000000000000000000000000000;
  factory_prototypeIds[2] = 0x4b6e696768740000000000000000000000000000000000000000000000000000;
  factory_prototypeIds[3] = 0x4172636865720000000000000000000000000000000000000000000000000000;
  factory_prototypeIds[4] = 0x50696b656d616e00000000000000000000000000000000000000000000000000;
  int32[] memory factory_staminaCosts = new int32[](5);
  factory_staminaCosts[0] = 400;
  factory_staminaCosts[1] = 700;
  factory_staminaCosts[2] = 900;
  factory_staminaCosts[3] = 1100;
  factory_staminaCosts[4] = 1800;
  (staticData, encodedLengths, dynamicData) = Factory.encode(factory_prototypeIds, factory_staminaCosts);
  staticDatas[6] = staticData;
  encodedLengthss[6] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[6] = dynamicData;

  (staticData, encodedLengths, dynamicData) = SpawnPoint.encode(true);
  staticDatas[7] = staticData;
  encodedLengthss[7] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[7] = dynamicData;

  (staticData, encodedLengths, dynamicData) = StaminaOnKill.encode(2500);
  staticDatas[8] = staticData;
  encodedLengthss[8] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[8] = dynamicData;

  createTemplate(templateId, tableIds, staticDatas, encodedLengthss, dynamicDatas);
}

// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

import { PackedCounter } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { createTemplate } from "../../libraries/templates/createTemplate.sol";
import { UnitTypes, CombatArchetypes, TerrainTypes, StructureTypes, ItemTypes } from "../common.sol";

import { Combat, CombatTableId, UnitType, UnitTypeTableId, CombatArchetype, CombatArchetypeTableId, StaminaOnKill, StaminaOnKillTableId, RequiresSetup, RequiresSetupTableId, Range, RangeTableId, Movable, MovableTableId, Untraversable, UntraversableTableId, Tier, TierTableId } from "../index.sol";

bytes32 constant templateId = "Catapult";
bytes32 constant CatapultTemplateId = templateId;
uint256 constant LENGTH = 9;

function CatapultTemplate() {
  bytes32[] memory tableIds = new bytes32[](LENGTH);
  bytes32[] memory encodedLengthss = new bytes32[](LENGTH);
  bytes[] memory staticDatas = new bytes[](LENGTH);
  bytes[] memory dynamicDatas = new bytes[](LENGTH);

  bytes memory staticData;
  PackedCounter encodedLengths;
  bytes memory dynamicData;

  tableIds[0] = ResourceId.unwrap(CombatTableId);
  tableIds[1] = ResourceId.unwrap(UnitTypeTableId);
  tableIds[2] = ResourceId.unwrap(CombatArchetypeTableId);
  tableIds[3] = ResourceId.unwrap(StaminaOnKillTableId);
  tableIds[4] = ResourceId.unwrap(RequiresSetupTableId);
  tableIds[5] = ResourceId.unwrap(RangeTableId);
  tableIds[6] = ResourceId.unwrap(MovableTableId);
  tableIds[7] = ResourceId.unwrap(UntraversableTableId);
  tableIds[8] = ResourceId.unwrap(TierTableId);

  (staticData, encodedLengths, dynamicData) = Combat.encode(120000, 120000, 0, 60000, 0, -100);
  staticDatas[0] = staticData;
  encodedLengthss[0] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[0] = dynamicData;

  (staticData, encodedLengths, dynamicData) = UnitType.encode(UnitTypes(uint8(8)));
  staticDatas[1] = staticData;
  encodedLengthss[1] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[1] = dynamicData;

  (staticData, encodedLengths, dynamicData) = CombatArchetype.encode(CombatArchetypes(uint8(8)));
  staticDatas[2] = staticData;
  encodedLengthss[2] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[2] = dynamicData;

  (staticData, encodedLengths, dynamicData) = StaminaOnKill.encode(250);
  staticDatas[3] = staticData;
  encodedLengthss[3] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[3] = dynamicData;

  (staticData, encodedLengths, dynamicData) = RequiresSetup.encode(true);
  staticDatas[4] = staticData;
  encodedLengthss[4] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[4] = dynamicData;

  (staticData, encodedLengths, dynamicData) = Range.encode(3, 4);
  staticDatas[5] = staticData;
  encodedLengthss[5] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[5] = dynamicData;

  (staticData, encodedLengths, dynamicData) = Movable.encode(2000);
  staticDatas[6] = staticData;
  encodedLengthss[6] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[6] = dynamicData;

  (staticData, encodedLengths, dynamicData) = Untraversable.encode(true);
  staticDatas[7] = staticData;
  encodedLengthss[7] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[7] = dynamicData;

  (staticData, encodedLengths, dynamicData) = Tier.encode(3);
  staticDatas[8] = staticData;
  encodedLengthss[8] = PackedCounter.unwrap(encodedLengths);
  dynamicDatas[8] = dynamicData;

  createTemplate(templateId, tableIds, staticDatas, encodedLengthss, dynamicDatas);
}
